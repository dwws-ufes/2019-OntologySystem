package br.ufes.informatica.rationalontology.core.controller;

import java.util.List;

import javax.ejb.EJB;
import javax.enterprise.context.SessionScoped;
import javax.faces.application.FacesMessage;
import javax.inject.Named;

import br.ufes.inf.nemo.jbutler.ejb.controller.JSFController;
import br.ufes.informatica.rationalontology.core.application.CompetencyQuestionApp;
import br.ufes.informatica.rationalontology.core.application.login.SessionInformation;
import br.ufes.informatica.rationalontology.core.domain.CompetencyQuestion;
import br.ufes.informatica.rationalontology.core.domain.SubOntology;

/** TODO: generated by FrameWeb. Should be documented. */
@Named @SessionScoped
public class CompetencyQuestionController extends JSFController {
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	
	/** TODO: generated by FrameWeb. Should be documented. */
	@EJB
	private CompetencyQuestionApp competencyQuestionApp;
	
	private SubOntology subOntology;
	
	
	/** TODO: generated by FrameWeb. Should be documented. */
	//private CompetenceQuestion competenceQuestion;
	
	/** TODO: generated by FrameWeb. Should be documented. */
	private List<CompetencyQuestion> competencyQuestionList;
	
	private CompetencyQuestion selectedItem;
	
	private boolean newCQ = false;
	
	public List<CompetencyQuestion> getCompetencyQuestionList() {
		return competencyQuestionList;
	}
	
	public void setCompetencyQuestionList(List<CompetencyQuestion> competencyQuestionList) {
		this.competencyQuestionList = competencyQuestionList;
	}
	
	public CompetencyQuestion getSelectedItem() {
		return selectedItem;
	}

	public void setSelectedItem(CompetencyQuestion selectedItem) {
		this.selectedItem = selectedItem;
	}	
	
	public SubOntology getSubOntology() {
		return subOntology;
	}

	public void setSubOntology(SubOntology subOntology) {
		this.subOntology = subOntology;
	}	
	
	//****************************************
	//*** Métodos de negócio
	//****************************************

	public void onLoadForm() {
		subOntology =  SessionInformation.getInstance().getSubOntology();
		competencyQuestionList = competencyQuestionApp.getCompetenceQuestionBySubOntology(subOntology);
		newCQ = false;
	}
	
	public String newCQ() {
		newCQ = true;
		selectedItem = new CompetencyQuestion();
		selectedItem.setSource(subOntology);
		return "/core/ontology/competencyQuestionDevelopmentPage.xhtml?faces-redirect=true";
	}
	
	/** TODO: generated by FrameWeb. Should be documented. */
	public void saveCQ() {
		try {
			competencyQuestionApp.saveCQ(selectedItem);
			
			if(newCQ) addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_INFO, "jbutler.message.successInsert");
			else addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_INFO, "jbutler.message.successUpdate");
			
			onLoadForm();
			
		} catch (Exception e) {
			System.out.println(e.getStackTrace());
			addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_FATAL, "jbutler.error.summary", e.getStackTrace().toString() );
		}
	}

	public String editCQ() {
		newCQ = false;
		if(selectedItem == null) {
			addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_ERROR, "competencyQuestionController.noSelected");
			return null;
		}
		return "/core/ontology/competencyQuestionDevelopmentPage.xhtml?faces-redirect=true";
	}
	
	public String deleteCQ() {
		if(selectedItem == null) {
			addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_ERROR, "competencyQuestionController.noSelected");
			return null;
		}
		
		try {
			competencyQuestionApp.deleteCQ(selectedItem);
			onLoadForm();
			addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_INFO, "jbutler.message.successDelete");
		}
		catch(Exception e) {
			addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_ERROR, "jbutler.message.failureDelete", e.getMessage());
		}
		
		
		return "/core/ontology/competencyQuestionSelectPage.xhtml?faces-redirect=true";
	}

	public void checkAuthorization() {
		competencyQuestionApp.checkAuthorization();
	}
}