package br.ufes.informatica.rationalontology.core.controller;

import java.util.List;

import javax.ejb.EJB;
import javax.enterprise.context.SessionScoped;
import javax.faces.application.FacesMessage;
import javax.inject.Named;

import br.ufes.inf.nemo.jbutler.ejb.controller.JSFController;
import br.ufes.informatica.rationalontology.core.application.OntologyManagementApp;
import br.ufes.informatica.rationalontology.core.application.login.SessionInformation;
import br.ufes.informatica.rationalontology.core.domain.Ontology;

/** TODO: generated by FrameWeb. Should be documented. */
@Named @SessionScoped
public class OntologyController extends JSFController { // implements OntologyJPA
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	
	/** TODO: generated by FrameWeb. Should be documented. */
	@EJB
	private OntologyManagementApp ontologyManagementApp;
		
	//********************************************************
	//*** Variáveis e métodos para acesso às ontologias
	//********************************************************
	
	/** TODO: generated by FrameWeb. Should be documented. */
	private List<Ontology> ontologies;
	
	/** TODO: generated by FrameWeb. Should be documented. */
	private Ontology selectedOntology;
	
	private boolean newOntology = false;
	
	/** Getter for ontologies. */
	public List<Ontology> getOntologies() {
		return ontologies;
	}

	/** Setter for ontologies. */
	public void setOntologies(List<Ontology> ontologies) {
		this.ontologies = ontologies;
	}
	
	/** Getter for ontology. */
	public Ontology getselectedOntology() {
		return selectedOntology;
	}

	/** Setter for ontology. */
	public void setSelectedOntology(Ontology selectedOntology) {
		this.selectedOntology = selectedOntology;
	}
	
	//*******************************************
	//*** Métodos de negócio
	//*******************************************
	public void onLoadForm() {
		putOntologies();
	}
	
	private void putOntologies() {
		checkAuthorization();
		ontologies = ontologyManagementApp.getOntologiesByUser(SessionInformation.getInstance().getUsuarioLogado());
	}
	
	public String newOntology() {
		selectedOntology = new Ontology();
		newOntology = true;
		return "/core/ontology/ontologyDevelopmentPage.xhtml?faces-redirect=true";
	}
	
	public void saveOntology() {
		if (newOntology) {
			saveNewOntology();
		}
		else {
			saveCurrentOntology();
		}
	}
	
	private void saveNewOntology() {
		try {
			ontologyManagementApp.saveNewOntology(selectedOntology, SessionInformation.getInstance().getUsuarioLogado());
			putOntologies();
			newOntology = false;
			addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_INFO, "jbutler.message.successInsert");
		} catch (Exception e) {
			addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_FATAL, "ontologyDevelopment.error.summary", "ontologyDevelpment.error.detail");
		}
	}
	
	private void saveCurrentOntology() {
		try {
			ontologyManagementApp.saveOntology(selectedOntology, SessionInformation.getInstance().getUsuarioLogado());
			putOntologies();
			addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_INFO, "jbutler.message.successUpdate");
		} catch (Exception e) {
			addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_FATAL, "ontologyDevelopment.error.summary", "ontologyDevelpment.error.detail");
		}
	}
	
	public String editOntology() {
		newOntology = false;
		
		if(selectedOntology == null) {
			addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_ERROR, "jbutler.message.notSelected");
			return null;
		}
		else {
			SessionInformation.getInstance().setOntology(selectedOntology);
			return "/core/ontology/ontologyDevelopmentPage.xhtml?faces-redirect=true";
		}
		
	}
	
	public String showSubOntologies() {
		if(selectedOntology == null) {
			addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_ERROR, "jbutler.message.notSelected");
			return null;
		}
		else {
			SessionInformation.getInstance().setOntology(selectedOntology);
			return "/core/ontology/subOntologySelectPage.xhtml?faces-redirect=true";
		}
	}
	
	public String showDataDictionary() {
		if(selectedOntology == null) {
			addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_ERROR, "jbutler.message.notSelected");
			return null;
		}
		else {
			SessionInformation.getInstance().setOntology(selectedOntology);
			return "/core/ontology/dictionarySelectPage.xhtml?faces-redirect=true";
		}
	}
	
	public String deleteOntology() {
		if(selectedOntology == null) {
			addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_ERROR, "jbutler.message.notSelected");
			return null;
		}
		try {
			ontologyManagementApp.deleteOntology(selectedOntology);
			putOntologies();
			addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_INFO, "jbutler.message.successDelete");
		} catch (Exception e) {
			addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_FATAL, "ontologyDevelopment.error.summary", "ontologyDevelpment.error.detail");
		}
		return "/core/ontology/ontologySelectPage.xhtml?faces-redirect=true";
	}
	
	public void checkAuthorization() {
		ontologyManagementApp.checkAuthorization();
	}
	
}