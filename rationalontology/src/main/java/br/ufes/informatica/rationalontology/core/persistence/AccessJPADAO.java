package br.ufes.informatica.rationalontology.core.persistence;

import java.util.List;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import javax.persistence.criteria.Subquery;

import br.ufes.inf.nemo.jbutler.ejb.persistence.BaseJPADAO;
import br.ufes.informatica.rationalontology.TypeOfAccess;
import br.ufes.informatica.rationalontology.core.domain.Access;
import br.ufes.informatica.rationalontology.core.domain.Access_;
import br.ufes.informatica.rationalontology.core.domain.Ontology;
import br.ufes.informatica.rationalontology.core.domain.User;

/** TODO: generated by FrameWeb. Should be documented. */
@Stateless
public class AccessJPADAO extends BaseJPADAO<Access> implements AccessDAO{
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	/** TODO: generated by FrameWeb. Should be documented. */
    @PersistenceContext
    private EntityManager entityManager;

	/** TODO: generated by FrameWeb. Should be documented. */
	@Override
	protected EntityManager getEntityManager() {
		return entityManager;
	}
    
	/** TODO: generated by FrameWeb. Should be documented. */
    @Override
	public List<Access> getRequests(User user) {
    	// Constructs the query over the User class.
		CriteriaBuilder cb = entityManager.getCriteriaBuilder();
		CriteriaQuery<Access> cq = cb.createQuery(Access.class);		
		Root<Access> root = cq.from(Access.class);

		cq.where(	cb.equal(root.get(Access_.Source), user)
				, 	cb.notEqual(root.get(Access_.accessType), 1)) ;
		TypedQuery<Access> q = entityManager.createQuery(cq);
		return q.getResultList();
	}
    
	/** TODO: generated by FrameWeb. Should be documented. */
    @Override
	public List<Access> getRequestsToGrant(User user) {
    	long id = user.getId();
    	//main Query
		CriteriaBuilder cb = entityManager.getCriteriaBuilder();
		CriteriaQuery<Access> accessQuery = cb.createQuery(Access.class);		
		Root<Access> root = accessQuery.from(Access.class);
		
		
		//subquery
    	Subquery<Access> accessSubquery = accessQuery.subquery(Access.class);
    	Root<Access> access = accessSubquery.from(Access.class);
    	
    	accessSubquery.select(access)//subquery selection
    	         .where(	cb.equal(access.get(Access_.Target), root.get(Access_.Target))
    	        		 ,	cb.equal(access.get(Access_.accessType), TypeOfAccess.CRIADOR) //Retornar só das ontologias que criou
    	        		 ,	cb.equal(access.get(Access_.Source), id) //retirara os projetos pertencentes ao usuário logado
    	        		
    	        		 );//subquery restriction
    	
    	//main query selection
    	accessQuery.select(root)
		.where(		cb.exists(accessSubquery)
				,	cb.equal(root.get(Access_.accessType), 2)
				
				);

		TypedQuery<Access> q = entityManager.createQuery(accessQuery);
		return q.getResultList();
	}


	@Override
	public Access getCreatorAccess(Ontology ontology) {
		// Constructs the query over the User class.
		CriteriaBuilder cb = entityManager.getCriteriaBuilder();
		CriteriaQuery<Access> cq = cb.createQuery(Access.class);		
		Root<Access> root = cq.from(Access.class);

		cq.where(	cb.equal(root.get(Access_.Target), ontology)
				, 	cb.equal(root.get(Access_.accessType), 1)) ; //retorna o criador da ontologi
		TypedQuery<Access> q = entityManager.createQuery(cq);
		return q.getSingleResult();
	}

}