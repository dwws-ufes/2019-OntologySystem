package br.ufes.informatica.rationalontology.core.application;

import java.util.List;

import javax.annotation.security.PermitAll;
import javax.ejb.EJB;
import javax.ejb.Stateless;

import br.ufes.inf.nemo.jbutler.TextUtils;
import br.ufes.informatica.rationalontology.core.domain.User;
import br.ufes.informatica.rationalontology.core.exception.RegistrationFailedException;
import br.ufes.informatica.rationalontology.core.persistence.UserDAO;

/** TODO: generated by FrameWeb. Should be documented. */
@Stateless
public class RegistrationServiceAppBean implements RegistrationServiceApp {
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	/** TODO: generated by FrameWeb. Should be documented. */
	@EJB
	private UserDAO userDAO;

	/** TODO: generated by FrameWeb. Should be documented. */
	@Override
	public void getAccess(String email) {
		// FIXME: auto-generated method stub
		return;
	}
	
	/** TODO: generated by FrameWeb. Should be documented. */
	@Override
	@PermitAll()
	public String getAccess() {
		System.out.println("RegistrationServiceBean -> ");
		//BaseDAO user = getDAO();
				
		List list = userDAO.retrieveAll();
		
		if(list.isEmpty()) {
			return "Usuário ou senha inválida!";
		}
		return null;
	}

	/** TODO: generated by FrameWeb. Should be documented. */
	@Override
	public void save(User user) throws RegistrationFailedException {
		
		try {
			user.setPassword(TextUtils.produceBase64EncodedMd5Hash(user.getPassword()));

			userDAO.save(user);
		}
		catch (Exception e) {
			// Logs and rethrows the exception for the controller to display the error to the user.
			//logger.log(Level.SEVERE, "Exception during system installation!", e);
			throw new RegistrationFailedException(e);
		}
	}
	

}