package br.ufes.informatica.rationalontology.core.controller;

import java.util.logging.Level;

import javax.annotation.security.RolesAllowed;
import javax.ejb.EJB;
import javax.enterprise.context.Conversation;
import javax.enterprise.context.ConversationScoped;
import javax.enterprise.context.SessionScoped;
import javax.faces.application.FacesMessage;
import javax.inject.Inject;
import javax.inject.Named;

//import br.ufes.inf.nemo.jbutler.ejb.application.CrudService;
//import br.ufes.inf.nemo.jbutler.ejb.controller.CrudController;
import br.ufes.inf.nemo.jbutler.ejb.controller.JSFController;
//import br.ufes.informatica.pooptime.core.exceptions.SystemInstallFailedException;
import br.ufes.informatica.rationalontology.core.application.RegistrationServiceApp;
import br.ufes.informatica.rationalontology.core.domain.User;
import br.ufes.informatica.rationalontology.core.exception.RegistrationFailedException;

/** TODO: generated by FrameWeb. Should be documented. */
@Named
@ConversationScoped
@RolesAllowed({ "admin" })
public class RegistrationController extends JSFController {
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;
	
	@Inject
	private Conversation conversation;

	private User user = new User();
	
	private String repeatPassword;
	
	/** TODO: generated by FrameWeb. Should be documented. */
	@EJB
	private RegistrationServiceApp registrationServiceApp;	
	
	
	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}
	
	public String getRepeatPassword() {
		return repeatPassword;
	}

	public void setRepeatPassword(String repeatPassword) {
		this.repeatPassword = repeatPassword;
	}

	public String begin() {
		// Begins the conversation, dropping any previous conversation, if existing.
		if (!conversation.isTransient()) conversation.end();
		conversation.begin();
		
		// Go to the first view.
		return "core/registration/registrationPage.xhtml?faces-redirect=true";
	}

	public void ajaxCheckPasswords() {
		checkPasswords();
	}

	/**
	 * Checks if the contents of the password fields match.
	 * 
	 * @return <code>true</code> if the passwords match, <code>false</code> otherwise.
	 */
	
	private boolean checkPasswords() {		
		if (((repeatPassword != null) && (!repeatPassword.equals( user.getPassword()))) || ((repeatPassword == null) && (user.getPassword() != null))) {
			addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_WARN, "registration.passwordsDontMatch.summary", "registration.passwordsDontMatch.detail");
			return false;
		}
		return true;
	}
	
	
	public String save() {
		// Check if passwords don't match. Add an error in that case.
		if (!checkPasswords()) return null;
		try {
			registrationServiceApp.save(user);

		}
		catch (RegistrationFailedException e) {
			addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_FATAL, "registration.error.summary", "registration.error.detail");
			return null;
		}

		// Ends the conversation.
		conversation.end();

		// Proceeds to the final view.
		return "successRegistrationPage.xhtml?faces-redirect=true";
	}
	
}