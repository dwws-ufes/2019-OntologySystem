package br.ufes.informatica.rationalontology.core.controller;

import java.util.List;

import javax.ejb.EJB;
import javax.enterprise.context.SessionScoped;
import javax.faces.application.FacesMessage;
import javax.inject.Named;

import org.apache.jena.query.QueryExecution;
import org.apache.jena.query.QueryExecutionFactory;
import org.apache.jena.query.QuerySolution;
import org.apache.jena.query.ResultSet;
import org.apache.jena.rdf.model.Literal;

import br.ufes.inf.nemo.jbutler.ejb.controller.JSFController;
import br.ufes.informatica.rationalontology.core.application.DataDictionaryApp;
import br.ufes.informatica.rationalontology.core.application.login.SessionInformation;
import br.ufes.informatica.rationalontology.core.domain.DataDictionary;
import br.ufes.informatica.rationalontology.core.domain.Ontology;

/** TODO: generated by FrameWeb. Should be documented. */
@Named @SessionScoped
public class DictionaryController extends JSFController {
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	/** TODO: generated by FrameWeb. Should be documented. */
	@EJB
	private DataDictionaryApp dataDictionaryApp;
	
	private DataDictionary selectedTerm;
	
	private List<DataDictionary> terms;
	
	private boolean newTerm = false;
	
	private Ontology ontology;
	
	public List<DataDictionary> findDataDictionary() {
		// FIXME: auto-generated method stub
		return null;
	}

	public DataDictionary getSelectedTerm() {
		return selectedTerm;
	}

	public void setSelectedTerm(DataDictionary selectedTerm) {
		this.selectedTerm = selectedTerm;
	}

	public List<DataDictionary> getTerms() {
		return terms;
	}

	public void setTerms(List<DataDictionary> terms) {
		this.terms = terms;
	}
	
	public Ontology getOntology() {
		return ontology;
	}

	public void setOntology(Ontology ontology) {
		this.ontology = ontology;
	}
	
	//***********************************************
	//*** Métodos de negócio
	//***********************************************

	public void onLoadForm() {
		setDictionary();
	}
	
	private void setDictionary() {
		ontology = SessionInformation.getInstance().getOntology();
		terms = dataDictionaryApp.getDictionaryByOntology(ontology);
		selectedTerm = null;
	}

	public String newTerm() {
		selectedTerm = new DataDictionary();
		newTerm = true;
		return "/core/ontology/dictionaryDevelopmentPage.xhtml?faces-redirect=true";
	}
	
	public String editTerm() {
		newTerm = false;
		if(selectedTerm == null) {
			addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_ERROR, "dictionaryController.notSelected");
			return null;
		}
		return "/core/ontology/dictionaryDevelopmentPage.xhtml?faces-redirect=true";
	}
	
	public void saveTerm() {
		if (newTerm) {
			selectedTerm.setSource(ontology);
			addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_INFO, "jbutler.message.successInsert");
		}
		else {
			addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_INFO, "jbutler.message.successUpdate");
		}
		
		try {
			dataDictionaryApp.saveDictionary(selectedTerm);
			setDictionary();
			newTerm = false;
		} catch (Exception e) {
			addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_FATAL, "subOntologyDevelopment.error.summary", "ontologyDevelpment.error.detail");
		}
		
	}
	
	public String deleteTerm() {
		if(selectedTerm == null) {
			addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_ERROR, "ontologyProject.notSelected");
			return null;
		}
		try {
			dataDictionaryApp.deleteTerm(selectedTerm);
			setDictionary();
			addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_INFO, "jbutler.message.successDelete");
		}
		catch(Exception e) {
			addGlobalI18nMessage("msgs", FacesMessage.SEVERITY_ERROR, "jbutler.message.successDelete");
		}
		
		return "/core/ontology/dictionarySelectPage.xhtml?faces-redirect=true";
	}

	public void checkAuthorization() {
		dataDictionaryApp.checkAuthorization();
	}
	
	public void getSuggestDefinition() {
		String name = selectedTerm.getConcept();
		
		if (name != null && name.length() > 3) {
			String query = 
					
					  "PREFIX dbo: <http://dbpedia.org/ontology/> " 
								+ "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> " 
								+ "SELECT ?name ?type ?x ?desc " 
								+ "WHERE { "
								+ "    ?x a ?type . " 
								+ "    ?x rdfs:label ?name ." 
								+ "    ?x dbo:abstract ?desc . " 
								+ "    FILTER ((?name = \"" + name + "\"@en) || (?name = \"" + name + "\"@pt))" 
								+ "    FILTER (langMatches(lang(?desc), \"PT\")) " 
								+ "}";
			
			QueryExecution queryExecution = QueryExecutionFactory.sparqlService("http://dbpedia.org/sparql", query);
			ResultSet results = queryExecution.execSelect();
			if (results.hasNext()) {
				QuerySolution querySolution = results.next();
				Literal literal = querySolution.getLiteral("desc");
				selectedTerm.setDefinition( ("" + literal.getValue()).substring(0, 199) );//.replaceAll("[^\\p{ASCII}]", "")
				selectedTerm.setSource( querySolution.get("x").toString());
				queryExecution.close();
			}
		}
	}
}