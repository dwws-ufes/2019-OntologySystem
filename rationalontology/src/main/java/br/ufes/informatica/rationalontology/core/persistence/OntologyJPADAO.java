package br.ufes.informatica.rationalontology.core.persistence;

import java.util.List;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import javax.persistence.criteria.Subquery;

import br.ufes.inf.nemo.jbutler.ejb.persistence.BaseJPADAO;
import br.ufes.informatica.rationalontology.core.domain.Access;
import br.ufes.informatica.rationalontology.core.domain.Access_;
import br.ufes.informatica.rationalontology.core.domain.Ontology;
import br.ufes.informatica.rationalontology.core.domain.Ontology_;
import br.ufes.informatica.rationalontology.core.domain.User;

/** TODO: generated by FrameWeb. Should be documented. */
@Stateless
public class OntologyJPADAO extends BaseJPADAO<Ontology> implements OntologyDAO{
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	/** TODO: generated by FrameWeb. Should be documented. */
    @PersistenceContext
    private EntityManager entityManager;

	/** TODO: generated by FrameWeb. Should be documented. */
	@Override
	protected EntityManager getEntityManager() {
		return entityManager;
	}
    
    
	/** TODO: generated by FrameWeb. Should be documented. */
    @Override
	public Ontology findOntologyByID(long id) {
		CriteriaBuilder cb = entityManager.getCriteriaBuilder();
		CriteriaQuery<Ontology> cq = cb.createQuery(Ontology.class);		
		Root<Ontology> root = cq.from(Ontology.class);

		cq.where( cb.equal(root.get(Ontology_.id), id)) ;
		TypedQuery<Ontology> q = entityManager.createQuery(cq);
		return q.getSingleResult();
	}
    
	/** TODO: generated by FrameWeb. Should be documented. */
    @Override
	public List<Ontology> findOntologyByName(String ontoName) {
		CriteriaBuilder cb = entityManager.getCriteriaBuilder();
		CriteriaQuery<Ontology> cq = cb.createQuery(Ontology.class);		
		Root<Ontology> root = cq.from(Ontology.class);

		cq.where(	cb.like(root.get(Ontology_.name), "%"+ontoName+"%")) ;
		TypedQuery<Ontology> q = entityManager.createQuery(cq);
		return q.getResultList();
	}
	/*
    @Override
	public List<Ontology> findOntologyByNameNotMine(String ontoName, User user) {
    	long id = user.getId();
    	List<Ontology> resultOntologies =  findOntologyByName(ontoName);
    	List<Access> resultAccess = findAccesOntology(id);
    	List<Ontology> result = new ArrayList<Ontology>();
    	 
    	for (Ontology ont : resultOntologies) {
			for (Access access : resultAccess) {
				if(ont.getId() == access.getId()) {
					result.add(ont);
				}
			}    		
		}
    	
		return result;
    }
    */
    @Override
	public List<Ontology> findOntologyByNameNotMine(String ontoName, User user) {

    	long id = user.getId();
 	    //main query
    	CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
    		
    	   
    	//main query
    	CriteriaQuery<Ontology> ontologyQuery = criteriaBuilder.createQuery(Ontology.class);
    	Root<Ontology> rootOntology = ontologyQuery.from(Ontology.class);
    	
    	//subquery
    	Subquery<Access> accessSubquery = ontologyQuery.subquery(Access.class);
    	Root<Access> access = accessSubquery.from(Access.class);
    	
    	accessSubquery.select(access)//subquery selection
    	         .where(	criteriaBuilder.equal(access.get(Access_.Target), rootOntology.get(Ontology_.id))
    	        		 ,	criteriaBuilder.equal(access.get(Access_.Source), id) //retirara os projetos pertencentes ao usuário logado
    	        		 ,	criteriaBuilder.notEqual(access.get(Access_.accessType), 4) //Mostrar participações NEGADAS ... para permitir pedir novamente
    	        		 );//subquery restriction
    	
    	//main query selection
    	ontologyQuery.select(rootOntology)
    			.where(		criteriaBuilder.not(criteriaBuilder.exists(accessSubquery))
    					,	criteriaBuilder.like(rootOntology.get(Ontology_.name), "%"+ontoName+"%")
    					);

    	TypedQuery<Ontology> typedQuery = entityManager.createQuery(ontologyQuery);
    	List<Ontology> resultList = typedQuery.getResultList();
    	   
		return resultList;
	}
    

	/** TODO: generated by FrameWeb. Should be documented. */
    @Override
	public Ontology getOntology(String nickname) {
		// FIXME: auto-generated method stub
		return null;
	}
	

}