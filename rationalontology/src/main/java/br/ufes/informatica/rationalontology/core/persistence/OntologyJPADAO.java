package br.ufes.informatica.rationalontology.core.persistence;

import java.util.List;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaDelete;
import javax.persistence.criteria.CriteriaBuilder.In;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import javax.persistence.criteria.Subquery;

import br.ufes.inf.nemo.jbutler.ejb.persistence.BaseJPADAO;
import br.ufes.informatica.rationalontology.core.domain.Access;
import br.ufes.informatica.rationalontology.core.domain.Access_;
import br.ufes.informatica.rationalontology.core.domain.CompetencyQuestion;
import br.ufes.informatica.rationalontology.core.domain.CompetencyQuestion_;
import br.ufes.informatica.rationalontology.core.domain.DataDictionary;
import br.ufes.informatica.rationalontology.core.domain.Ontology;
import br.ufes.informatica.rationalontology.core.domain.Ontology_;
import br.ufes.informatica.rationalontology.core.domain.SubOntology;
import br.ufes.informatica.rationalontology.core.domain.SubOntology_;
import br.ufes.informatica.rationalontology.core.domain.User;

/** TODO: generated by FrameWeb. Should be documented. */
@Stateless
public class OntologyJPADAO extends BaseJPADAO<Ontology> implements OntologyDAO{
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	/** TODO: generated by FrameWeb. Should be documented. */
    @PersistenceContext
    private EntityManager entityManager;

	/** TODO: generated by FrameWeb. Should be documented. */
	@Override
	protected EntityManager getEntityManager() {
		return entityManager;
	}
    
    
	/** TODO: generated by FrameWeb. Should be documented. */
    @Override
	public Ontology findOntologyByID(long id) {
		CriteriaBuilder cb = entityManager.getCriteriaBuilder();
		CriteriaQuery<Ontology> cq = cb.createQuery(Ontology.class);		
		Root<Ontology> root = cq.from(Ontology.class);

		cq.where( cb.equal(root.get(Ontology_.id), id)) ;
		TypedQuery<Ontology> q = entityManager.createQuery(cq);
		return q.getSingleResult();
	}
    
	/** TODO: generated by FrameWeb. Should be documented. */
    @Override
	public List<Ontology> findOntologyByName(String ontoName) {
		CriteriaBuilder cb = entityManager.getCriteriaBuilder();
		CriteriaQuery<Ontology> cq = cb.createQuery(Ontology.class);		
		Root<Ontology> root = cq.from(Ontology.class);

		cq.where(	cb.like(root.get(Ontology_.name), "%"+ontoName+"%")) ;
		TypedQuery<Ontology> q = entityManager.createQuery(cq);
		return q.getResultList();
	}
    
    @Override
	public List<Ontology> findOntologyByNameNotMine(String ontoName, User user) {

    	long id = user.getId();
 	    //main query
    	CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
    		
    	   
    	//main query
    	CriteriaQuery<Ontology> ontologyQuery = criteriaBuilder.createQuery(Ontology.class);
    	Root<Ontology> rootOntology = ontologyQuery.from(Ontology.class);
    	
    	//subquery
    	Subquery<Access> accessSubquery = ontologyQuery.subquery(Access.class);
    	Root<Access> access = accessSubquery.from(Access.class);
    	
    	accessSubquery.select(access)//subquery selection
    	         .where(	criteriaBuilder.equal(access.get(Access_.Target), rootOntology.get(Ontology_.id))
    	        		 ,	criteriaBuilder.equal(access.get(Access_.Source), id) //retirara os projetos pertencentes ao usuário logado
    	        		 ,	criteriaBuilder.notEqual(access.get(Access_.accessType), 4) //Mostrar participações NEGADAS ... para permitir pedir novamente
    	        		 );//subquery restriction
    	
    	//main query selection
    	ontologyQuery.select(rootOntology)
    			.where(		criteriaBuilder.not(criteriaBuilder.exists(accessSubquery))
    					,	criteriaBuilder.like(rootOntology.get(Ontology_.name), "%"+ontoName+"%")
    					);

    	TypedQuery<Ontology> typedQuery = entityManager.createQuery(ontologyQuery);
    	List<Ontology> resultList = typedQuery.getResultList();
    	   
		return resultList;
	}
    
    public List<Ontology> getOntologiesByUser(User user){
    	long id = user.getId();
 	    //main query
    	CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
    		
    	   
    	//main query
    	CriteriaQuery<Ontology> ontologyQuery = criteriaBuilder.createQuery(Ontology.class);
    	Root<Ontology> rootOntology = ontologyQuery.from(Ontology.class);
    	
    	//subquery
    	Subquery<Access> accessSubquery = ontologyQuery.subquery(Access.class);
    	Root<Access> access = accessSubquery.from(Access.class);
    	In<String> inClause = criteriaBuilder.in(access.get("accessType"));
    	inClause.value("1");
    	inClause.value("3");
    	
    	accessSubquery.select(access)//subquery selection
    	         .where(	criteriaBuilder.equal(access.get(Access_.Target), rootOntology.get(Ontology_.id))
    	        		 ,	criteriaBuilder.equal(access.get(Access_.Source), id) //projetos pertencentes ao usuário logado
    	        		 );//subquery restriction
    	
    	//main query selection
    	ontologyQuery.select(rootOntology)
    			.where(		criteriaBuilder.exists(accessSubquery)
    					);

    	TypedQuery<Ontology> typedQuery = entityManager.createQuery(ontologyQuery);
    	List<Ontology> resultList = typedQuery.getResultList();
    	   
		return resultList;
    }
    
    public void deleteOntology(Ontology ontology) {
    	//try {
    		
    		
    		//entityManager.getTransaction().begin(); //Transaction is not accessible when using JTA with JPA-compliant transaction access enabled
    		
		    deleteCompetencyQuestionFromOntology(ontology);
		    
		    deleteSubOntologyFromOntology(ontology);
		    
		    deleteDataDictionaryFromOntology(ontology);
		    
		    deleteAccessFromOntology(ontology);
		    
		    deleteByOntology(ontology);
		    
		    //entityManager.getTransaction().commit();
		    
	    	
    	//}catch(Exception e) {
    		//entityManager.getTransaction().rollback();
    	//	System.out.println(e.getStackTrace());
    	//}
    }
    
    private void deleteByOntology(Ontology ontology) {
    	CriteriaBuilder cb = entityManager.getCriteriaBuilder();
    	
    	// create delete
    	CriteriaDelete<Ontology> delete = cb.createCriteriaDelete(Ontology.class);
		
    	// set the root class
		Root<Ontology> root  = delete.from(Ontology.class);
		
		// set where clause
		delete.where(cb.equal(root.get("id"), ontology.getId()));
		
		// perform update
		entityManager.createQuery(delete).executeUpdate();
    }
    
    private void deleteAccessFromOntology(Ontology ontology) {
    	CriteriaBuilder cb = entityManager.getCriteriaBuilder();
    	
    	// create delete
    	CriteriaDelete<Access> delete = cb.createCriteriaDelete(Access.class);
		
    	// set the root class
		Root<Access> root  = delete.from(Access.class);
		
		// set where clause
		delete.where(cb.equal(root.get("Target"), ontology));
		
		// perform update
		entityManager.createQuery(delete).executeUpdate();
    }
    
    private void deleteDataDictionaryFromOntology(Ontology ontology) {
    	CriteriaBuilder cb = entityManager.getCriteriaBuilder();
    	
    	// create delete
    	CriteriaDelete<DataDictionary> delete = cb.createCriteriaDelete(DataDictionary.class);
		
    	// set the root class
		Root<DataDictionary> root  = delete.from(DataDictionary.class);
		
		// set where clause
		delete.where(cb.equal(root.get("Source"), ontology));
		
		// perform update
		entityManager.createQuery(delete).executeUpdate();
    }
    
    private void deleteSubOntologyFromOntology(Ontology ontology) {
    	CriteriaBuilder cb = entityManager.getCriteriaBuilder();
    	
    	// create delete
    	CriteriaDelete<SubOntology> delete = cb.createCriteriaDelete(SubOntology.class);
		
    	// set the root class
		Root<SubOntology> root  = delete.from(SubOntology.class);
		
		// set where clause
		delete.where(cb.equal(root.get("Source"), ontology));
		
		// perform update
		entityManager.createQuery(delete).executeUpdate();
    }
    
    private void deleteCompetencyQuestionFromOntology(Ontology ontology) {
		CriteriaBuilder cb = entityManager.getCriteriaBuilder();
		
		//main query
		CriteriaDelete<CompetencyQuestion> criteriaDelete = cb.createCriteriaDelete(CompetencyQuestion.class);
		Root<CompetencyQuestion> root = criteriaDelete.from(CompetencyQuestion.class);
		
		//subquery
    	Subquery<SubOntology> subOntologySubquery = criteriaDelete.subquery(SubOntology.class);
    	Root<SubOntology> subOntology = subOntologySubquery.from(SubOntology.class);
    	
    	subOntologySubquery.select(subOntology)//subquery selection
         .where(	cb.equal(subOntology.get(SubOntology_.id), root.get(CompetencyQuestion_.Source))
        		 ,	cb.equal(subOntology.get(SubOntology_.Source), ontology) //retirara os projetos pertencentes ao usuário logado
        		 );//subquery restriction
		 
		 
		 //criteriaDelete.where(cb.equal(root.get(CompetencyQuestion_.Source), ontology));
    	criteriaDelete.where(cb.exists(subOntologySubquery)); 
		
		entityManager.createQuery(criteriaDelete).executeUpdate();
    }
	

}