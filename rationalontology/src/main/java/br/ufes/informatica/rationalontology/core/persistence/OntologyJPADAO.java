package br.ufes.informatica.rationalontology.core.persistence;

import java.util.ArrayList;
import java.util.List;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.JoinType;
import javax.persistence.criteria.Root;

import br.ufes.inf.nemo.jbutler.ejb.persistence.BaseJPADAO;
import br.ufes.informatica.rationalontology.core.domain.Access;
import br.ufes.informatica.rationalontology.core.domain.Access_;
import br.ufes.informatica.rationalontology.core.domain.Ontology;
import br.ufes.informatica.rationalontology.core.domain.Ontology_;

/** TODO: generated by FrameWeb. Should be documented. */
@Stateless
public class OntologyJPADAO extends BaseJPADAO<Ontology> implements OntologyDAO{
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	/** TODO: generated by FrameWeb. Should be documented. */
    @PersistenceContext
    private EntityManager entityManager;

	/** TODO: generated by FrameWeb. Should be documented. */
	@Override
	protected EntityManager getEntityManager() {
		return entityManager;
	}
    
    
	/** TODO: generated by FrameWeb. Should be documented. */
    @Override
	public List<Ontology> findOntologyByName(String ontoName) {
		CriteriaBuilder cb = entityManager.getCriteriaBuilder();
		CriteriaQuery<Ontology> cq = cb.createQuery(Ontology.class);		
		Root<Ontology> root = cq.from(Ontology.class);

		cq.where(	cb.like(root.get(Ontology_.name), "%"+ontoName+"%")) ;
		TypedQuery<Ontology> q = entityManager.createQuery(cq);
		return q.getResultList();
	}
	
    @Override
	public List<Ontology> findOntologyByNameNotMine(String ontoName, long id) {
    	List<Ontology> resultOntologies =  findOntologyByName(ontoName);
    	List<Access> resultAccess = findAccesOntology(id);
    	List<Ontology> result = new ArrayList<Ontology>();
    	 
    	for (Ontology ont : resultOntologies) {
			for (Access access : resultAccess) {
				if(ont.getId() == access.getId()) {
					result.add(ont);
				}
			}    		
		}
    	
		return result;
    	

	}
    
    private List<Access> findAccesOntology(long id){
    	CriteriaBuilder cb = entityManager.getCriteriaBuilder();
		CriteriaQuery<Access> cq = cb.createQuery(Access.class);		
		Root<Access> root = cq.from(Access.class);

		cq.where(	cb.notEqual(root.get(Access_.Source), id),
					cb.equal(root.get(Access_.accessType), 1)
				) ;
		TypedQuery<Access> q = entityManager.createQuery(cq);
		return q.getResultList();
    }
    
	/** TODO: generated by FrameWeb. Should be documented. */
    //@Override
	//public List findUserOntologies(User user) {
		// FIXME: auto-generated method stub
	//	return null;
	//}
	
	/** TODO: generated by FrameWeb. Should be documented. */
    @Override
	public Ontology getOntology(String nickname) {
		// FIXME: auto-generated method stub
		return null;
	}
	

}