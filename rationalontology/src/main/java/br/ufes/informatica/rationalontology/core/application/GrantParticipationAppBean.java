package br.ufes.informatica.rationalontology.core.application;

import java.util.List;

import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.faces.application.FacesMessage;

import br.ufes.informatica.rationalontology.TypeOfAccess;
import br.ufes.informatica.rationalontology.core.domain.Access;
import br.ufes.informatica.rationalontology.core.exception.SaveException;
import br.ufes.informatica.rationalontology.core.persistence.AccessDAO;

/** TODO: generated by FrameWeb. Should be documented. */
@Stateless	
public class GrantParticipationAppBean implements GrantParticipationApp {
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	/** TODO: generated by FrameWeb. Should be documented. */
	@EJB
	private AccessDAO accessDAO;

	/** TODO: generated by FrameWeb. Should be documented. */
	@Override
	public List<Access> getRequests(long id) {
		return accessDAO.getRequests(id);
	}

	/** TODO: generated by FrameWeb. Should be documented. */
	@Override
	public void grantParticipation(Access access) throws SaveException {
		if(access.getAccessType() == TypeOfAccess.SOLICITANTE) {
			access.setAccessType(TypeOfAccess.COLABORADOR);
			accessDAO.save(access);
		}
		else {
			throw new SaveException(null, "O usuário só pode ser COLABORADOR se antes foi um SOLICITANTE");
		}
		
	}
	
	@Override
	public void declineParticipation(Access access) throws SaveException {
		if(access.getAccessType() == TypeOfAccess.SOLICITANTE || access.getAccessType() == TypeOfAccess.COLABORADOR) {
			access.setAccessType(TypeOfAccess.NEGADO);
			accessDAO.save(access);
		}
		else {
			throw new SaveException(null, "Uma solicitação só pode ser NEGADA se for SOLICITANTE ou COLABORADOR");
		}
	}

	/** TODO: generated by FrameWeb. Should be documented. */
	@Override
	public String revoqueParticipation(Access access) {
		// FIXME: auto-generated method stub
		return null;
	}

}