package br.ufes.informatica.rationalontology.core.persistence;

import java.util.ArrayList;
import java.util.List;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Expression;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.persistence.criteria.Subquery;
import javax.persistence.criteria.CriteriaBuilder.In;

import br.ufes.inf.nemo.jbutler.ejb.persistence.BaseJPADAO;
import br.ufes.informatica.rationalontology.core.domain.Access;
import br.ufes.informatica.rationalontology.core.domain.Access_;
import br.ufes.informatica.rationalontology.core.domain.CompetenceQuestion;
import br.ufes.informatica.rationalontology.core.domain.CompetenceQuestion_;
import br.ufes.informatica.rationalontology.core.domain.SubOntology;
import br.ufes.informatica.rationalontology.core.domain.SubOntology_;

/** TODO: generated by FrameWeb. Should be documented. */
@Stateless
public class CompetenceQuestionJPADAO extends BaseJPADAO<CompetenceQuestion> implements CompetenceQuestionDAO{
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	/** TODO: generated by FrameWeb. Should be documented. */
    @PersistenceContext
    private EntityManager entityManager;

	/** TODO: generated by FrameWeb. Should be documented. */
	@Override
	protected EntityManager getEntityManager() {
		return entityManager;
	}
    
    
	/** TODO: generated by FrameWeb. Should be documented. */
    @Override
	public List<SubOntology> findCQ(SubOntology subOntology) {
		// FIXME: auto-generated method stub
		return null;
	}


	@Override 	
	public List<CompetenceQuestion> getCompetenceQuestionBySubOntologies(List<SubOntology> list) {
		
		if(list == null || list.size() == 0) {
			return new ArrayList<CompetenceQuestion>();
		}
		System.out.println("Tamanho: "+ list.size());
		
    	CriteriaBuilder cb = entityManager.getCriteriaBuilder();
    	
		CriteriaQuery<CompetenceQuestion> cq = cb.createQuery(CompetenceQuestion.class);		
		Root<CompetenceQuestion> root = cq.from(CompetenceQuestion.class);
		
		cq.where( root.get(CompetenceQuestion_.Source).in(list) ) ;
		
		TypedQuery<CompetenceQuestion> q = entityManager.createQuery(cq);
		return q.getResultList();
	}
	

}